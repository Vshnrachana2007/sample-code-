#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define the structure for a Book node
struct Book {
    int id;
    char title[100];
    char author[100];
    struct Book* next;
};

// Function to create (add) a new book
void createBook(struct Book** head) {
    struct Book* newBook = (struct Book*)malloc(sizeof(struct Book));
    if (newBook == NULL) {
        printf("Memory allocation failed!\n");
        return;
    }

    printf("Enter Book ID: ");
    scanf("%d", &newBook->id);
    getchar(); // To consume newline after ID input
    printf("Enter Book Title: ");
    fgets(newBook->title, sizeof(newBook->title), stdin);
    newBook->title[strcspn(newBook->title, "\n")] = '\0';
    printf("Enter Book Author: ");
    fgets(newBook->author, sizeof(newBook->author), stdin);
    newBook->author[strcspn(newBook->author, "\n")] = '\0';

    newBook->next = NULL;

    if (*head == NULL) {
        *head = newBook;
    } else {
        struct Book* temp = *head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = newBook;
    }

    printf("Book added successfully!\n");
}

// Function to delete a book by ID
void deleteBook(struct Book** head) {
    if (*head == NULL) {
        printf("Library is empty.\n");
        return;
    }

    int id;
    printf("Enter Book ID to delete: ");
    scanf("%d", &id);

    struct Book* temp = *head;
    struct Book* prev = NULL;

    // If head needs to be deleted
    if (temp != NULL && temp->id == id) {
        *head = temp->next;
        free(temp);
        printf("Book deleted successfully.\n");
        return;
    }

    // Search for the book
    while (temp != NULL && temp->id != id) {
        prev = temp;
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Book with ID %d not found.\n", id);
        return;
    }

    prev->next = temp->next;
    free(temp);
    printf("Book deleted successfully.\n");
}

// Function to search for a book by ID
void searchBook(struct Book* head) {
    int id;
    printf("Enter Book ID to search: ");
    scanf("%d", &id);

    while (head != NULL) {
        if (head->id == id) {
            printf("Book Found:\n");
            printf("ID: %d\n", head->id);
            printf("Title: %s\n", head->title);
            printf("Author: %s\n", head->author);
            return;
        }
        head = head->next;
    }

    printf("Book with ID %d not found.\n", id);
}

// Function to display all books
void displayBooks(struct Book* head) {
    if (head == NULL) {
        printf("Library is empty.\n");
        return;
    }

    printf("\nBooks in Library:\n");
    while (head != NULL) {
        printf("ID: %d | Title: %s | Author: %s\n", head->id, head->title, head->author);
        head = head->next;
    }
}

int main() {
    struct Book* head = NULL;
    int choice;

    do {
        printf("\n--- Library Menu ---\n");
        printf("1. Create/Add Book\n");
        printf("2. Delete Book\n");
        printf("3. Search Book\n");
        printf("4. Display All Books\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // Consume any leftover newline character

        switch (choice) {
            case 1:
                createBook(&head);
                break;
            case 2:
                deleteBook(&head);
                break;
            case 3:
                searchBook(head);
                break;
            case 4:
                displayBooks(head);
                break;
            case 5:
                printf("Exiting Library System.\n");
                break;
            default:
                printf("Invalid choice. Try again.\n");
        }

    } while (choice != 5);

    // Free allocated memory before exit
    struct Book* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}
